/*********************************************************************
    设计模式按照目的分，可以分为创建型模式、结构型模式和行为型模式。
       + 创建型模式用来处理对象的创建过程

       + 结构型模式用来处理类或对象的组合

       + 行为型模式用来对类或对象怎样交互怎样分配职责进行描述
*********************************************************************/

[ 创建型模式主要包含以下5种设计模式 ] :
 1. = 工厂方法模式(Factory Method Pattern) = 
    用意是定义一个创建产品对象的工厂接口，将实际创建工作推迟到子类之中。

 2. = 抽象工厂模式(Abstract Factory Pattern) = 
    意图是提供一个创建一系列相关或者相互依赖的接口，而无需指定它们具体的类

 3. = 建造者模式(Builder Pattern) =
    意图是将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。

 4. = 原型模式(Prototype Pattern) = 
    用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。

 5. = 单例模式(Singleton Pattern) =
    是保证一个类仅有一个实例，并提供一个访问它的全局访问点。

[ 结构型模式主要包含以下7种设计模式 ]:
 6. = 适配器模式(Adapter Pattern) =
    将一个类的接口转换成客户希望的另外一个接口。使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。

 7. = 桥接模式(Bridge Pattern) = 
    将抽象部分与实际部分分离，使它们都可以独立的变化。

 8. = 组合模式(Composite Pattern) = 
    将对象组合成树形结构以表示"部分-整体"的层次结构。使得用户对单个对象和组合的使用具有一致性。

 9. = 装饰者模式(Decorator Pattern) =
    动态的给一个对象添加一些额外的职责。就增加功能来说，些模式比生成子类更为灵活。

 10. = 外观模式(Facade Pattern) = 
    为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。

 11. = 享元模式(Flyweight Pattern) = 
    以共享的方式高效地支持大量的细粒度的对象。

 12. = 代理模式(Proxy Pattern) = 
    为其他对象提供一种代理以控制对这个对象的访问。

[ 行为型模式主要包含以下11种设计模式 ]:
 13. = 责任链模式(Chain of Responsibility Pattern) = 
    将很多对象其下家引用连接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求，这使得系统可以在不影响客户端的情况下动态地重新组织链和分配责任。

 14. = 命令模式(Command Pattern) =
    将一个请求封装为一个对象，从而使你可用不同的请求对客户端进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。

 15. = 解释器模式(Interpreter Pattern) =
    描述了如何为简单的语言定义一个语法，如何在该语言中表示一个句子，以及如何解释这些句子。

 16. = 迭代器模式(Iterator Pattern) =
    提供了一种方法顺序来访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。

 17. = 中介者模式(Mediator Pattern) =
    定义一个中介对象来封装系统对象之间的交互。终结者使各个对象不需要显示的相互调用，从而使其松散，而且可以独立的改变他们之间的交互。

 18. = 备忘录模式(Memento Pattern) =
    在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。

 19. = 观察者模式(Observer Pattern) =
    定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。

 20. = 状态模式(State Pattern) = 
    允许一个对象在其内部状态改变时改变它的行为，使对象看起来似乎修改了它的类。

 21. = 策略模式(State Pattern) = 
    准备一组算法，并将每一个算法封装起来，使得它们可以互换。

 22. = 模板方法模式(Template Method Pattern) =
    使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。

 23. = 访问者模式(Visitor Pattern) = 
     表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。
